import {getRandomId} from '../common';
import {GameState, WinState} from '../game';
import {CodeFunction, CodeGenerator} from '../generator';

export class CCodeFunction extends CodeFunction {
  private statements: string[] = [];

  printGameState(state: GameState): string {
    return `puts(${JSON.stringify(GameState.printState(state))});`;
  }

  getCharacterToVariable(): string {
    const varName = `i${getRandomId()}`;
    this.statements.push(`char ${varName} = moves[0];`);
    return varName;
  }

  ifChar(variableName: string, value: string, ...statements: string[]) {
    this.statements.push(
      `if (${variableName} == ${value}) {
          ${statements.join('\n')}
        }`
    );
  }

  addStatement(s: string): void {
    this.statements.push(s);
  }

  callFunction(codeFunction: CodeFunction, ...args: string[]): string {
    return `${codeFunction.name}(${args.join(', ')});`;
  }

  emitPrototype(): string {
    return `void ${this.name}(char* moves);`;
  }

  emitBody(): string {
    return `void ${this.name}(char* moves) {
        ${this.statements.join('\n')}
      }`;
  }

  nextMove(): string {
    return '&moves[1]';
  }
}

export class CCodeGenerator extends CodeGenerator {
  private funcs: CCodeFunction[] = [];
  private entryPointName: string | undefined = undefined;

  createFunction(): CodeFunction {
    const newFunc = new CCodeFunction();

    this.funcs.push(newFunc);

    return newFunc;
  }

  setEntryPoint(codeFunction: CodeFunction): void {
    this.entryPointName = codeFunction.name;
  }

  getFilename(name: string): string {
    return `${name}.c`;
  }

  getFunctionForWinState(state: WinState): CodeFunction | undefined {
    switch (state) {
      case WinState.None:
        return undefined;
      case WinState.Cross:
        return new CCodeFunction('cross_win');
      case WinState.Naught:
        return new CCodeFunction('naught_win');
      case WinState.Tie:
        return new CCodeFunction('tie');
    }
  }

  emit(): string {
    if (this.entryPointName === undefined) {
      throw new Error('Not Implemented');
    }

    const prototypes = this.funcs.map(func => func.emitPrototype());
    const functionBodies = this.funcs.map(func => func.emitBody());

    return `#include <stdio.h>
      #include <stdlib.h>
      // generated by i_dont_know_a_good_name.
  
      void cross_win() {
        puts("Crosses Win");
        exit(0);
      }
      
      void naught_win() {
        puts("Naughts Win");
        exit(1);
      }
  
      void tie() {
        puts("It's a tie");
        exit(2);
      }
  
      ${prototypes.join('\n')}
      ${functionBodies.join('\n')}
  
      int main(int argc, char *argv[]) {
        if (argc < 2) return 1;
        ${this.entryPointName}(argv[1]);
  
        return 0;
      }
      `;
  }
}
